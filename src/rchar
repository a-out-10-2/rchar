#!/usr/bin/env python3.4
# -----------------------------------------------------------------------------
#   rchar
#
#   Copyright (C) 2015, 2016 Andrew Moe
#
#   This program is free software; you can redistribute it and/or modify
#   it under the terms of the GNU General Public License as published by
#   the Free Software Foundation; either version 2 of the License, or
#   (at your option) any later version.
#
#   This program is distributed in the hope that it will be useful,
#   but WITHOUT ANY WARRANTY; without even the implied warranty of
#   MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
#   GNU General Public License for more details.
#
#   You should have received a copy of the GNU General Public License along
#   with this program; if not, write to the Free Software Foundation, Inc.,
#   51 Franklin Street, Fifth Floor, Boston, MA 02110-1301 USA. Or, see
#   <http://www.gnu.org/licenses/gpl-2.0.html>.
# -----------------------------------------------------------------------------

import argparse
import random
import sys

__ERR_SYS_RAND_NOT_FOUND = "SystemRandom not supported, defaulting to Python random."
__ERR_STRING_LENGTH = "String length must be greater than zero!"
__ERR_CHARSCOPE_IS_EMPTY = "Charscope is empty."
__ERR_ASCII_RANGE_INVALID = "Input ASCII range out of bounds (0 <= r <= 255)."
__ERR_INTERFACE_FUNC_NOT_CALLABLE = "Interface function not callable."
__ERR_INVALID_PARAMETERS = "Invalid parameters in function!"

# Set default verbosity
verbosity = 0

# Attempt to set SystemRandom as global random class
_randclass = random
try:
    randclass = random.SystemRandom()
except (NotImplementedError, Exception):
    print(__ERR_SYS_RAND_NOT_FOUND, file=sys.stderr)

__version__ = '1.1'
__all__ = ['__version__', 'generate_ctrl33', 'generate_print95', 'generate_extprint223',
           'generate_full256', 'generate_string_from_charscope', 'generate_string_from_range']


def generate_ctrl33(length):
    """Generate a pseudo-random string from the 33 ASCII control characters.

    :param length: The quantity of characters to generate in string.
    :return: The generated string of ASCII control characters
    :rtype: str
    """
    return generate_string_from_charscope(length, __range2charscope(0, 31) + chr(127))


def generate_print95(length):
    """Generate a pseudo-random string from the standard printable 95 ASCII characters.

    :param length: The quantity of characters to generate in string.
    :return: The generated string of printable ASCII characters.
    :rtype: str
    """
    return generate_string_from_range(length, 32, 126)


def generate_extprint223(length):
    """Generate a pseudo-random string from the standard+extended printable 223 ASCII characters.

    :param length: The quantity of characters to generate in string.
    :return: The generated string from the extended set of printable ASCII characters.
    :rtype: str
    """
    return generate_string_from_charscope(length, __range2charscope(32, 126) + __range2charscope(128, 255))


def generate_full256(length):
    """Generate a pseudo-random string from all 256 ASCII characters.

    :param length: The quantity of characters to generate in string.
    :return: The generated string from all 256 ASCII characters.
    :rtype: str
    """
    return generate_string_from_range(length, 0, 255)


def generate_string_from_charscope(length, charscope):
    """Generate a pseudo-random string from a provided scope of characters.

    :param length: The quantity of characters to generate in string.
    :param charscope: The scope of characters from which to select.
    :return: The generated string from a select set of characters.
    :rtype: str
    """
    assert charscope is not None and charscope is not "", __ERR_CHARSCOPE_IS_EMPTY

    if verbosity >= 2:
        print("DEBUG: using charscope = %s" % charscope, file=sys.stderr)
    return __generate_string(length, __generate_character_in_charscope, charscope)


def generate_string_from_range(length, lobound, hibound):
    """Generate a pseudo-random string from a range of ASCII characters.

    :param length: The quantity of characters to generate in string.
    :param lobound: The low-range boundary of characters to select.
    :param hibound: The high-range boundary of characters to select.
    :return: The generated string from a range of indicies that correlate to the ASCII table.
    :rtype: str
    """
    assert lobound >= 0 and hibound <= 255, __ERR_ASCII_RANGE_INVALID

    if verbosity >= 2:
        print("DEBUG: using range = [%d, %d]" % (lobound, hibound), file=sys.stderr)
    return __generate_string(length, __generate_character_in_charscope, __range2charscope(lobound, hibound))


def __generate_string(length, _randchar_func, params):
    """Generate a pseudo-random string from a provided random-character function.

    :param length: The quantity of characters to generate in string.
    :param _randchar_func: The function that generates a random character.
    :param params: The required argument list to pass into _randchar_func .
    :return: The string generated by the provided _randchar_func .
    :rtype: str
    """
    assert length > 0, __ERR_STRING_LENGTH
    assert callable(_randchar_func), __ERR_INTERFACE_FUNC_NOT_CALLABLE

    # Generate a character and recursively generate the rest of the string.
    if length > 1:
        return _randchar_func(*[params]) + __generate_string(length - 1, _randchar_func, params)
    # Generate and return the last character.
    elif length is 1:
        return _randchar_func(*[params])
    return ""


def __generate_character_in_charscope(charscope):
    """Generate a pseudo-random character from a provided scope of characters.

    :param charscope: The scope of characters from which to select.
    :return: A randomly selected character from the charascope.
    :rtype: str
    """
    return _randclass.choice(charscope)


def __range2charscope(lobound, hibound):
    """Convert an (int, int) range representing ASCII characters into a string
    containing that full scope of characters.

    :param lobound: The low-range boundary of characters to select.
    :param hibound: The high-range boundary of characters to select.
    :return: A set of characters corresponding to a range of indicies within the ASCII table.
    :rtype: str
    """
    # Iterate through a range and return each value as a character.
    rtnbuf = ""
    for i in range(lobound, hibound + 1):
        rtnbuf += chr(i)
    return rtnbuf


def __unit_test():
    """Perform a unit test on this program.

    :return rc: The return code that is a sum of errors experienced in unit test.
    :rtype: int
    """
    rc = 0
    rc += __unit_breakdown(5, generate_ctrl33)
    rc += __unit_breakdown(6, generate_print95)
    rc += __unit_breakdown(7, generate_extprint223)
    rc += __unit_breakdown(8, generate_full256)
    return rc


def __unit_breakdown(length, _func_str):
    """Breakdown the output of a generated string function.

    :param length: The quantity of characters to generate in string.
    :param _func_str: The function to generate a particular random string.
    :return: The return code that is a sum of errors experienced in unit test breakdown.
    :rtype: int
    """
    # Generate string data
    outstr = _func_str.__call__(length)
    len_outstr = len(outstr)

    # Print string analysis
    print("test: %s(%d)" % (_func_str.__name__, length))
    print("len   = %d" % len_outstr)
    print("code  = %s" % outstr.encode())
    print("repr  = %s" % repr(outstr))
    print("print = %s" % outstr)
    print()

    # Validate breakdown
    rc = 0
    if length is not len_outstr:
        rc += 1
    return rc


def __parse_args():
    """Parse the arguments received from STDIN.

    :return (args.length, args.charscope, args.ctrl33,
             args.print95, args.extprint223, args.full256,
             args.unittest, args.verbose):
    """
    # Constructing argument parser
    parser = argparse.ArgumentParser(description="A handy tool to generate (pseudo-)random ASCII strings.")

    parser.add_argument("length", type=int, nargs='?', default=8,
                        help="The quantity of characters to generate in string.")
    strchoice_group = parser.add_mutually_exclusive_group()
    strchoice_group.add_argument("-c", "--charscope", type=str, nargs='?', default=None,
                                 help="A pseudo-random string generated by this charscope.")
    strchoice_group.add_argument("-C", "--ctrl33", action='store_true',
                                 help="A pseudo-random string generated from the 33 ASCII control characters.")
    strchoice_group.add_argument("-P", "--print95", action='store_true',
                                 help="A pseudo-random string generated from the 95 standard ASCII characters.")
    strchoice_group.add_argument("-E", "--extprint223", action='store_true',
                                 help="A pseudo-random string generated from the 223 standard+extended ASCII "
                                      "characters.")
    strchoice_group.add_argument("-A", "--full256", action='store_true',
                                 help="A pseudo-random string generated from all 256 ASCII characters.")
    parser.add_argument("--unittest", required=False, action='store_true',
                        help="Execute unit test and program exit rc=errors.")
    parser.add_argument("-v", "--verbose", action="count", default=0,
                        help="Display rchar debug output during runtime.")
    parser.add_argument("--version", action='version', version='rchar %s' % __version__)

    # Process arguments
    args = parser.parse_args()

    # Set default option if no choice is selected
    if args.charscope is None and not args.ctrl33 and not args.print95 and not args.extprint223 and not args.full256:
        args.print95 = True

    # Display program variables
    if args.verbose >= 1:
        print("rchar input arguments", file=sys.stderr)
        print("\tlength \t\t\t" + str(args.length), file=sys.stderr)
        print("\t--charscope \t" + str(args.charscope), file=sys.stderr)
        print("\t--ctrl33 \t\t" + str(args.ctrl33), file=sys.stderr)
        print("\t--print95 \t\t" + str(args.print95), file=sys.stderr)
        print("\t--extprint223 \t" + str(args.extprint223), file=sys.stderr)
        print("\t--full256 \t\t" + str(args.full256), file=sys.stderr)
        print("\t--unittest \t\t" + str(args.unittest), file=sys.stderr)
        print("\t--verbose \t\t" + str(args.verbose), file=sys.stderr)
        print("")

    return (
        args.length, args.charscope, args.ctrl33, args.print95, args.extprint223, args.full256, args.unittest,
        args.verbose)


# Program execution start
if __name__ == "__main__":
    (length, charscope, ctrl33, print95, extprint223, full256, unittest, verbose) = __parse_args()

    # Set debug level
    verbosity = verbose

    # Generate string based on parameters
    if unittest:
        sys.exit(__unit_test())
    elif charscope is not None:
        print(generate_string_from_charscope(length, charscope))
    elif ctrl33:
        print(generate_ctrl33(length))
    elif print95:
        print(generate_print95(length))
    elif extprint223:
        print(generate_extprint223(length))
    elif full256:
        print(generate_full256(length))
    else:
        raise Exception("Argument parser did return valid parameters.  Case should not be reachable.  Exiting.")
        sys.exit(1)

    # Exit the program as expected
    sys.exit(0)
